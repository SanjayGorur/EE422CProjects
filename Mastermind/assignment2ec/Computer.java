/*
 * EE422C Project 2 (Mastermind) Extra Credit submission by
 * Replace <...> with your actual data. 
 * <Sanjay Gorur>
 * <sg52879>
 * Slip days used: <0>
 * Fall 2021
 */
package assignment2ec;
import java.util.*;


public class Computer {

	// Sorry, I seemed to need a lot of variables for the extra credit. I kept them private though!
	private String lastGuess;
	private Response lastResponse;
	private GameConfiguration gameConfiguration;
	private ArrayList<Integer> indexes;
	private ArrayList<Integer> takens;
	private ArrayList<String> responses;
	private int[] amounts;
	private int end;
	private int guessNumber;
	
	// Constructor for game configuration and setting indexes, taken indexes, responses by computer, and amounts of pegs.
	public Computer (GameConfiguration gameConfiguration) {
		this.gameConfiguration = gameConfiguration;
		indexes = new ArrayList<Integer>();
		takens = new ArrayList<Integer>();
		responses = new ArrayList<String>();
		amounts = new int[gameConfiguration.colors.length];
		// TODO: Add whatever else you want here
	}

	// The last response, generated by the computer's automated guess.
	public void setLastResponse (Response r) {
		lastResponse = r;
	}

	// Reset Game! Done by grading script
	public void reset () {
		lastResponse = null;
		// TODO: anything else you want here
	}

	// Computer, it's time to pick the next guess.
	public String pickNextGuess () 
	{
		// TODO: anything else you want here
		if(lastResponse != null)
		{
			String second = "";
			/*
			Random random = new Random();
			for(int i = 0; i < gameConfiguration.pegNumber; i++)
			{
				second += gameConfiguration.colors[random.nextInt(gameConfiguration.pegNumber)];
			}
			*/

			// IF THIS IS THE SECOND GUESS. Do a selected amount of the next color!
			if(guessNumber == 0)
			{
				amounts[guessNumber] = lastResponse.b + lastResponse.w;
				int i = 0;
				if(amounts[guessNumber] > 0)  {indexes.add(guessNumber);}
				for(i = i; i < amounts[guessNumber] && i < gameConfiguration.pegNumber; i++)
				{
					second += gameConfiguration.colors[guessNumber];
				}

				guessNumber++;
				for(i = i; i < gameConfiguration.pegNumber; i++)
				{
					second += gameConfiguration.colors[guessNumber];
				}

				responses.add(second);
				return second;
			}

			// If not first guess, go through colors until you have the right four pegs.
			else if(guessNumber > 0 && guessNumber < gameConfiguration.colors.length && ((lastResponse.b + lastResponse.w) < gameConfiguration.pegNumber))
			{
				amounts[guessNumber] = lastResponse.b + lastResponse.w;
				if(amounts[guessNumber] > amounts[guessNumber - 1]) {indexes.add(guessNumber);}
				//System.out.println(amounts[guessNumber] - amounts[guessNumber - 1]);

				int i = 0;
				for(i = i; i <= guessNumber && i < gameConfiguration.colors.length && second.length() < gameConfiguration.pegNumber; i++)
				{
					if(indexes.contains(i) == true)
					{
						int max = 0;
						if(i == 0) {max = amounts[i];}
						else {max = amounts[i] - amounts[i - 1];}
						while(max > 0 && second.length() < gameConfiguration.pegNumber)
						{
							second += gameConfiguration.colors[i];
							max--;
						}
					}
				}

				//System.out.println(second.length());
				//System.out.println(guessNumber);
				i = guessNumber + 1;
				//System.out.println(i);
				for(i = i; second.length() < gameConfiguration.pegNumber;)
				{
					second += gameConfiguration.colors[i];
				}

				guessNumber = i;
				responses.add(second);
				return second;
			}

			// Once we have 4 pegs, it's time for an automated guess. Randomization for the win. It's less than 25 guesses at least.

			for(int i = guessNumber - 1; i < gameConfiguration.colors.length - 1; i++)
			{
				amounts[i + 1] = gameConfiguration.pegNumber; 
			}

			if(guessNumber <= gameConfiguration.colors.length)
			{
				indexes.add(guessNumber);
				guessNumber = gameConfiguration.colors.length + 1;
			}

			//System.out.println(indexes);

			Random random = new Random();

			int[] replace = new int[amounts.length];
			for(int b = 0; b < amounts.length; b++)
			{
				if(b == 0) {replace[b] = amounts[b];}
				else {replace[b] = amounts[b] - amounts[b - 1];}
			}

			//System.out.println(Arrays.toString(amounts));

			// For randomization, we have to see whether or net the guess has already happened or pegs are repeated.
			while(takens.size() < indexes.size() && second.length() < gameConfiguration.pegNumber)
			{
					int use = indexes.get(random.nextInt(indexes.size()));
					if(replace[use] >= 1)
					{
						second += gameConfiguration.colors[use];
						replace[use] = replace[use] - 1;
						if(replace[use] == 0) {takens.add(use);}
					}

					if(second.length() == gameConfiguration.pegNumber && responses.contains(second)) 
					{
						takens.clear(); 
						second = "";
						for(int b = 0; b < amounts.length; b++)
						{
							if(b == 0) {replace[b] = amounts[b];}
							else {replace[b] = amounts[b] - amounts[b - 1];}
						}
					}
					//System.out.println(second);
				//System.out.println(takens + "\t" + indexes);
			}

			// Clear takens indexes for later use.
			takens.clear();

			// Add guess for later check
			responses.add(second);
			return second;
		}

		// Initial setup for the program for first guess! IF it's the first guess, do 4 of the first color.
		for(int i = 0; i < amounts.length; i++)
		{
			amounts[i] = -1;
		}
		end = 0;
		guessNumber = -1;

		String first = "";

		for(int i = 0; i < gameConfiguration.pegNumber; i++)
		{
			first += gameConfiguration.colors[0];
		}
		guessNumber++;

		return first;
	}
}
